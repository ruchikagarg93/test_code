# Copy this file as `.env` and overwrite the variable values with yours
# After that, everything should be handled with `pdm`

# MANDATORY variables: always copy them and specify the variable value
# Path to the HOME directory in the host
# Windows users: Pay attention to the backslashes as this gets injected to Docker Compose
# COMPOSE_HOME_DIR="C:\Users\"
COMPOSE_HOME_DIR=C:\\Users\\
# Path to the directory where data can be cached
COMPOSE_CACHE_DIR=C:\\Users\\RUCHGARG\\Downloads\\tmp\\
# Path to the directory where data / models / experiments are stored
COMPOSE_DATA_DIR=C:\\Users\\RUCHGARG\\Downloads\\data\\
# For SSH containers, the port to expose the new container
COMPOSE_SSH_PORT=
# Path to the directory where the code is stored
COMPOSE_CODE_DIR=.

# OPTIONAL variables: copy them only if you have to change the default value
# Or if you want to use them out of the `pdm` context like in VSCode devcontainers
# the type of container to build (options: ssh, linux, windows)
COMPOSE_PLATFORM=windows
# your username in the host
COMPOSE_USER_NAME=ruchgarg
# your uid (id -u)
COMPOSE_USER_UID=5262428
# your group name in the host
COMPOSE_GROUP_NAME=1049089
# your group id (id -g)
COMPOSE_USER_GID=1049089
# your shell in the container
COMPOSE_USER_SHELL=/bin/bash
# use docker buildkit to build the docker image
DOCKER_BUILDKIT=1
COMPOSE_DOCKER_CLI_BUILD=1
# Use 'nvidia' if the host has GPUs, 'runc' otherwise
COMPOSE_RUNTIME=runc

# True when the process is running in a CI environment
# This is used to avoid running some commands that are only needed in CI
CI=false

# The docker registry to pull/push images
# Use either cisacreastus2.azurecr.io for prod or cisacreastus2.azurecr.io for develop
DOCKER_REGISTRY=cisacreastus2.azurecr.io
# The name of the project (it may be different than the name of the repository)
PROJECT_NAME=pr-flyers-metrics-worker
# The version of the project. Defaults to the latest git tag
PROJECT_VERSION=1.0.0
# The tag of the docker image. Defaults to 'latest'
# Only required if you use vscode "Rebuild and reopen" instead of `pdm run devcontainer`
DOCKER_TAG=1.0.0

# The username and password of the private NIQ PYPI repository
# Go to https://artifactory.adlm.nielseniq.com/ui, log in with your NIQ credentials
# On the upper right corner click on "Edit Profile" and then "Generate API Key"
# Copy that key and use it as password with your NIQ username
# WARNING! add them on your .bashrc or load this .env file in your terminal with
# > source .env
# Otherwise, pdm won't be able to read them to resolve sources in pyproject.toml
# NOTE: If you are creating a dev container using VSCode, you need to manually move the credentials to .secrets.env
#       If you are using 'pdm run devcontainer', just leave them here
ARTIFACTORY_PYPI_USER=adlmje01
ARTIFACTORY_PYPI_PASS=AKCp5dK4mFaWfBkK1SNcq6UTSBof2WqLQgqjtUE6SLsSevfsZs8A1QWsWeHKyi9uwokNP2Xau

# Deployment variables
# WARNING! Change them according to the deployment environment you want to use
# The following variables are only required to test `pdm run deploy` locally
# The region to deploy the worker: us, eu, ap, la
DEPLOYMENT_REGION=us
# The environment where the worker is deployed: prod, nonprod
DEPLOYMENT_ENVIRONMENT=nonprod
# The cluster to deploy the workload
# Choose either NIQ (shared cluster) or CIS (dedicated cluster)
DEPLOYMENT_CLUSTER=NIQ

# Mock variables just to run deploy locally
CACHE_REDIS_PASSWORD=cache_password
METADATA_REDIS_PASSWORD=metadata_password
SERVICE_QUEUE_REDIS_PASSWORD=service_password
AUDIT_QUEUE_CONNECTION_STRING=audit_connection_string
AZURE_SERVICE_BUS_CONNSTR=azure_service_bus_connstr
CIS_CATALOG_API_KEY=cis_catalog_api_key
CIS_REGISTRY_API_KEY=cis_registry_api_key
CIS_ADLSFS_CLIENT_SECRET=cis_adlsfs_client_secret
